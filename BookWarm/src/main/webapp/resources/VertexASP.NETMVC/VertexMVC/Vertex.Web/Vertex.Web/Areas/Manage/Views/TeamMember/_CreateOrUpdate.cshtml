@model TeamMemberModel

@{ bool isNew = !(Model != null && Model.Id > 0); }


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary("", new { @class = "text-danger" })

    <div class="row align-items-center">
        <div class="col-md-2 mb-3">
            @Html.Vertex().PictureUploaderFor(x => x.PictureId).EntityName("TeamMember")
        </div>
        <div class="col-md-10">
            @Html.ValidationSummary("", new { @class = "text-danger" })

            <div class="input-group mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text">
                        <i class="fa fa-link mr-3 fs-14"></i>
                        @Html.LabelFor(x => x.Name, new { @class = "m-0 fs-14" })
                    </span>
                </div>
                @Html.TextBoxFor(x => x.Name, new { @class = "form-control" })
            </div>
            <div class="input-group mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text">
                        <i class="fas fa-pencil-alt mr-3 fs-14"></i>
                        @Html.LabelFor(x => x.Position, new { @class = "m-0 fs-14" })
                    </span>
                </div>
                @Html.TextBoxFor(x => x.Position, new { @class = "form-control" })
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-10 offset-md-2">
            <div class="form-group">
                <span class="text-danger">@Html.ValidationMessageFor(x => x.Description)</span>
                @Html.Vertex().HtmlEditorFor(x => x.Description)
            </div>
        </div>
    </div>

    <div class="row align-items-center mb-6">
        <div class="col-md-5 offset-md-2">
            <div class="input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text pr-3">
                        <i class="fas fa-sort-numeric-down mr-3 fs-14"></i>
                        @Html.LabelFor(x => x.OrderNo, new { @class = "m-0 fs-14" })
                    </span>
                </div>
                <div class="form-control p-0">
                    @Html.Telerik().IntegerTextBoxFor(x => x.OrderNo)
                </div>
            </div>
        </div>
        <div class="col-md-5">
            <div class="form-group m-0">
                <div class="custom-control custom-checkbox">
                    @Html.CheckBoxFor(m => m.IsActive, new { @class = "custom-control-input" })
                    @Html.LabelFor(m => m.IsActive, new { @class = "custom-control-label" })
                </div>
            </div>
        </div>

        <div class="col-md-10 offset-md-2">
            <div class="form-group mt-4 pt-4 border-top">
                <button type="submit" name="action:@(isNew ? "Create": "Edit")" class="btn btn-primary btn-sm btn-wide transition-hover mr-2">
                    <i class="fa fa-save mr-1 fs-14"></i> Save
                </button>

                @if (!isNew)
                {
                    @(Html.Vertex().ConfirmModal("Delete", "TeamMember", new { @id = Model.Id })
                        .Title("Confirm Delete")
                        .Content("Are you sure do you want to delete ?")
                        .For(Html.Vertex().Button().Text("Delete").Color(BootstrapColor.Secondary).Size(ButtonSize.Small))
                     )
                }

                <div class="d-inline-block">
                    <span class="mx-2 text-light font-weight-light fs-15">or</span>
                    <i class="fas fa-long-arrow-alt-left fs-13 text-primary o-8"></i>
                    <a href="@Url.Action("List", "TeamMember")" class="m-link fs-15">  Back to list</a>
                </div>
            </div>
        </div>
    </div>

    if (isNew)
    {
        <p> <i class="fa fa-info-circle mr-1"></i> First save a team member to add social network(s)</p>
    }
    else
    {
        <p>Social Networks</p>
    }
    <div style="@(isNew ? "opacity:0.5": "")">
        @(Html.Telerik().Grid<SocialNetworkModel>()
                    .Name("SocialIcons")
                    .BindTo(Model.SocialIcons)
                    .DataKeys(keys => { keys.Add(x => x.Id); })
                    .DataBinding(dataBinding =>
                    {
                        dataBinding.Ajax()
                            .Select("SocialNetworkList", "TeamMember", new { entityId = Model.Id })
                            .Insert("SocialNetworkInsert", "TeamMember", new { entityId = Model.Id })
                            .Update("SocialNetworkUpdate", "TeamMember", new { entityId = Model.Id })
                            .Delete("SocialNetworkDelete", "TeamMember");
                    })
                    .Columns(columns =>
                    {
                        columns.Bound(x => x.Name).Width("20%");
                        columns.Bound(x => x.WebAddress).Width("48%")
                             .Template(@<text><a href="@item.WebAddress" target="_blank">@item.WebAddress</a></text>)
                             .ClientTemplate("<a target='_blank' href='<#= WebAddress #>'><#= WebAddress #></a>");
                           columns.Bound(x => x.OrderNo).Centered().Width("10%");
                           columns.Command(commands =>
                           {
                               commands.Edit();
                               commands.Delete();
                           }).HtmlAttributes(new { align = "right" }).Width("27%");
                       }).ToolBar(commands => commands.Insert()).EnableCustomBinding(true))

    </div>
}